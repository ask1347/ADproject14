#-*- coding: utf-8 -*-

# Import PyQt
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget
from PyQt5.QtWidgets import QGridLayout
from PyQt5.QtWidgets import QLabel, QLineEdit, QTextEdit
from PyQt5.QtWidgets import QToolButton, QStatusBar

from slot import Slot
import random
n=random.randint(0,999)
x = n// 100
y = n// 10 - 10*x
z = n% 10
list=[x, y, z]
print(list)
class SlotGame(QWidget):

    def __init__(self, parent=None):
        super().__init__(parent)

        # Title label
        label = QLabel('Slot Game!')
        font = label.font()
        font.setPointSize(font.pointSize() + 10)
        label.setFont(font)
        label.setAlignment(Qt.AlignCenter)

        #slot number
        self.Xoutput = QLineEdit(str(x))
        self.Xoutput.setReadOnly(True)
        self.Youtput = QLineEdit(str(y))
        self.Youtput.setReadOnly(True)
        self.Zoutput = QLineEdit(str(z))
        self.Zoutput.setReadOnly(True)

        outputLayout = QGridLayout()
        outputLayout.addWidget(self.Xoutput, 0, 1, 1, 1)
        outputLayout.addWidget(self.Youtput, 0, 2, 1, 1)
        outputLayout.addWidget(self.Zoutput, 0, 3, 1, 1)

        slotlabel = QLabel("slot")
        slotlabel.setAlignment(Qt.AlignRight)

        # User interactions
        self.startButton = QToolButton(self)
        self.startButton.setText('Start')
        self.newGameButton = QToolButton(self)
        self.newGameButton.setText('New Game')
        self.currentMoneyLabel = QLabel("money: ")
        self.currentMoney = QLineEdit(self)
        self.currentMoney.setReadOnly(True)
        self.stakeLabel = QLabel("stake: ")
        self.Stake = QLineEdit(self)
        self.Count = QLineEdit("남은 횟수: ",self)
        self.Count.setReadOnly(True)
        self.statusBar = QLineEdit(self)
        self.statusBar.setReadOnly(True)

        userLayout = QGridLayout()
        userLayout.addWidget(self.startButton, 0, 0)
        userLayout.addWidget(self.newGameButton, 1, 0)
        userLayout.addWidget(self.currentMoneyLabel, 0, 1)
        userLayout.addWidget(self.currentMoney, 0, 2)
        userLayout.addWidget(self.stakeLabel, 1, 1)
        userLayout.addWidget(self.Stake, 1, 2)
        userLayout.addWidget(self.Count, 2, 0)
        userLayout.addWidget(self.statusBar, 2, 1)

        # Layout
        mainLayout = QGridLayout()
        mainLayout.addWidget(label, 0, 0)
        mainLayout.addLayout(outputLayout, 1, 0)
        mainLayout.addLayout(userLayout, 2, 0)
        self.setLayout(mainLayout)

class mainWindow(QMainWindow):

    # Define the digit count used in the game

    def __init__(self, parent=None):
        super().__init__(parent)

        # Initialize the main widget
        self.gameWidget = SlotGame()
        self.setCentralWidget(self.gameWidget)

        # Window title & status bar
        self.setWindowTitle('ADProject Slotmachine')
        self.statusBar = QStatusBar(self)
        self.setStatusBar(self.statusBar)

        # Connect button callbacks
        self.gameWidget.startButton.clicked.connect(self.buttonClicked)
        self.gameWidget.newGameButton.clicked.connect(self.startGame)

        # Initialize a new game
        self.game = Slot()
        self.startGame()

    def startGame(self):
        # Start a new game
        self.game.newGame(self)

        # Clear dirty output generated by the last game
        self.gameWidget.currentMoney = QLineEdit()
        self.gameWidget.Stake.clear()
        self.gameOver = False

        # Show new game status message and set "game over" flag to False
        self.statusBar.showMessage('New game started')
        self.gameOver = False

    def buttonClicked(self):
        button = self.sender()
        key = button.text()

        if key == 'Start':
            count = 0
            self.Count = count
            count += 1
            if count >= 10:
                return False
        elif key == 'New Game':
            Count = 10
            Money = 1000




        # If the "game over" flag is set, we do not accept any input
        if self.gameOver:
            self.statusBar.showMessage('Game Over!')
            return


if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    gameWindow = mainWindow()
    gameWindow.show()
    sys.exit(app.exec_())
